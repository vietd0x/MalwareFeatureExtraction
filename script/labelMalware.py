#!/usr/bin/python3
import json

inpFile = "../result/vtv3_PEfile_00219.json"
outFile = "../result/labeled_00219.csv"

black_lable = ["unsafe", "malicious", "staticai", "aidetect"]
while_label = ["trojan", "adware", "downloader", "virus", "worm", "backdoor", "pua", "hacktool", "ransom", "spyware"]
# top 15 av
av_rank = ['Avast', 'AVG', 'Avira', 'BitDefender', 'ESET', 'GData', 'K7AntiVirus', 'Kaspersky', 'Malwarebytes', 'McAfee', 'Microsoft', 'Panda', 'TotalDefense', 'TrendMicro', 'VIPRE']

def get_sugguested_label(data):
    try:
        lable = data["popular_threat_classification"]["suggested_threat_label"]
        return lable
    except KeyError:
        return False

def isInList(w, l):
    for e in l:
        if(e in w.lower()):
            return w
    return False

def get_label_from_top15_av(data):
    # av has result
    res_dict = {}
    for av in data.keys():
        # if(data[av]["result"] != None and data[av]["result"] not in black_lable):
        if(data[av]["result"] != None and isInList(data[av]["result"], black_lable) is False):
            res_dict[av] = data[av]["result"]

    if(len(res_dict) ==  1):
        return list(res_dict.values())[0]
    # check whitelist
    for res in res_dict:
        if(isInList(res, while_label)):
            return res
    # check top 15 av
    for top_av in av_rank:
        try:
            if(data[top_av]["result"] != None):
                return data[top_av]["result"]
            else:
                for av in res_dict.keys():
                    if(top_av in av):
                        return data[av]["result"]
        except KeyError:
            print('ree')
    
    

with open (inpFile, "r") as inf:
    for line in inf:
        data = json.loads(line)["data"]["attributes"]
        print(data['md5'])

        lable = get_sugguested_label(data)
        if(lable == False):
            lable = get_label_from_top15_av(data["last_analysis_results"])

        md5 = data["md5"]
        with open (outFile, "a") as outf:
            outf.write(f"{md5}, {lable}\n")
